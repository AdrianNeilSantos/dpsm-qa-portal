{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Aji Maglanque\\\\Desktop\\\\dpsm-qa-portal\\\\components\\\\unit-head\\\\dashboard\\\\dashboard_table.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useTable, useGroupBy, useExpanded, useSortBy, useFilters, usePagination } from 'react-table'; // default search box filter\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    className: \"form-control col-md-6\",\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"form-control col-md-6\",\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), options.map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option,\n      children: option\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n} // the table markup\n\n\nfunction Table({\n  columns,\n  data\n}) {\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    prepareRow,\n    page,\n    rows,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize,\n      groupBy,\n      expanded\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    initialState: {\n      pageIndex: 0\n    }\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({\n      className: \"table table-striped\"\n    }, getTableProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({}, column.getHeaderProps(column.getSortByToggleProps())), {}, {\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ' (click to sort)'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: column.canFilter ? column.render('Filter') : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 5\n            }, this)]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 16\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 12\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: page.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                style: {\n                  background: cell.isGrouped ? '#0aff0082' : cell.isAggregated ? '#ffa50078' : cell.isPlaceholder ? '#ff000042' : 'white'\n                },\n                children: cell.isGrouped ?\n                /*#__PURE__*/\n                // If it's a grouped cell, add an expander and row count\n                _jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, row.getToggleRowExpandedProps()), {}, {\n                    children: row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 27\n                  }, this), ' ', cell.render('Cell'), \" (\", row.subRows.length, \")\"]\n                }, void 0, true) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n                // renderer for cell\n                cell.render('Aggregated') : cell.isPlaceholder ? null : // For cells with repeated values, render null\n                // Otherwise, just render the regular cell\n                cell.render('Cell')\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 21\n              }, this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n        children: footerGroups.map(group => /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, group.getFooterGroupProps()), {}, {\n          children: group.headers.map(column => /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, column.getFooterProps()), {}, {\n            children: [column.canGroupBy ?\n            /*#__PURE__*/\n            // If the column can be grouped, let's add a toggle\n            _jsxDEV(\"span\", _objectSpread(_objectSpread({}, column.getGroupByToggleProps()), {}, {\n              children: column.isGrouped ? 'Click to Ungroup ' : 'Click to Group'\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 21\n            }, this) : null, column.render('Footer')]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 2\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => gotoPage(0),\n        disabled: !canPreviousPage,\n        children: '<<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => previousPage(),\n        disabled: !canPreviousPage,\n        children: '<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => nextPage(),\n        disabled: !canNextPage,\n        children: '>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => gotoPage(pageCount - 1),\n        disabled: !canNextPage,\n        children: '>>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"| Go to page:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: pageIndex + 1,\n          onChange: e => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0;\n            gotoPage(page);\n          },\n          style: {\n            width: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n        value: pageSize,\n        onChange: e => {\n          setPageSize(Number(e.target.value));\n        },\n        children: [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: pageSize,\n          children: [\"Show \", pageSize]\n        }, pageSize, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 1\n  }, this);\n} // configure columns, populate cells, render table\n\n\nfunction AnalyticsTable() {\n  const data = React.useMemo(() => [{\n    col1: 'Cena, John',\n    col2: 'Attended Seminar',\n    col3: 'Training/Seminars'\n  }, {\n    col1: 'Stark, Anthony',\n    col2: 'Published Journal',\n    col3: 'Publications'\n  }, {\n    col1: 'Nelson, Kent',\n    col2: 'Published Book',\n    col3: 'Publications'\n  }, {\n    col1: 'Parker, Peter',\n    col2: 'Conducted Training',\n    col3: 'Training/Seminars'\n  }, {\n    col1: 'Omega, Kenny',\n    col2: 'Government Project',\n    col3: 'Public Service'\n  }, {\n    col1: 'Wilson, Sam',\n    col2: 'Medical Research',\n    col3: 'Research Grants'\n  }, {\n    col1: 'Naito, Tetsuya',\n    col2: 'Global Initiative',\n    col3: 'Public Service'\n  }, {\n    col1: 'Sakurai, Masahiro',\n    col2: 'Charity Work',\n    col3: 'Public Service'\n  }, {\n    col1: 'Reyes, Jaime',\n    col2: 'CERN Research',\n    col3: 'Research Grants'\n  }, {\n    col1: 'Steve',\n    col2: 'Spoke at Seminar',\n    col3: 'Training/Seminars'\n  }, {\n    col1: 'Hedgehog, Sonic the',\n    col2: 'Published Dissertation',\n    col3: 'Publications'\n  }, {\n    col1: 'Odinsdottir, Angela',\n    col2: 'Published Thesis',\n    col3: 'Publications'\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    Footer: '',\n    accessor: 'col1',\n    // accessor is the \"key\" in the data,\n    aggregate: 'count',\n    Aggregated: ({\n      value\n    }) => `${value} Names`,\n    Filter: DefaultColumnFilter\n  }, {\n    Header: 'Accomplishment',\n    Footer: '',\n    accessor: 'col2',\n    aggregate: 'count',\n    Aggregated: ({\n      value\n    }) => `${value} Accomplishments`,\n    Filter: DefaultColumnFilter\n  }, {\n    Header: 'Accomplishment Type',\n    Footer: '',\n    accessor: 'col3',\n    aggregate: 'count',\n    Aggregated: ({\n      value\n    }) => `${value} Entries`,\n    Filter: SelectColumnFilter\n  }], []);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 6\n  }, this);\n}\n\nexport default AnalyticsTable;","map":{"version":3,"sources":["C:/Users/Aji Maglanque/Desktop/dpsm-qa-portal/components/unit-head/dashboard/dashboard_table.js"],"names":["React","useTable","useGroupBy","useExpanded","useSortBy","useFilters","usePagination","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","Table","columns","data","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","footerGroups","prepareRow","page","rows","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","groupBy","expanded","initialState","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","background","isGrouped","isAggregated","isPlaceholder","getToggleRowExpandedProps","isExpanded","subRows","group","getFooterGroupProps","getFooterProps","canGroupBy","getGroupByToggleProps","Number","width","AnalyticsTable","col1","col2","col3","Header","Footer","accessor","aggregate","Aggregated"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useTable, useGroupBy, useExpanded, useSortBy, useFilters, usePagination } from 'react-table'\r\n\r\n// default search box filter\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input className = \"form-control col-md-6\"\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      options.add(row.values[id])\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select className = \"form-control col-md-6\"\r\n      value={filterValue}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n// the table markup\r\nfunction Table ({columns, data}){\r\n const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n   const {\r\n     getTableProps,\r\n     getTableBodyProps,\r\n     headerGroups,\r\n     footerGroups,\r\n     prepareRow,\r\n     page,\r\n     rows, \r\n\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize, groupBy, expanded },\r\n   } = useTable({ columns, data, defaultColumn, initialState: { pageIndex: 0 } }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination)\r\n\r\n return(\r\n<div>\r\n   <table className = \"table table-striped\" {...getTableProps()}>\r\n       <thead>\r\n         {headerGroups.map(headerGroup => (\r\n           <tr {...headerGroup.getHeaderGroupProps()}>\r\n             {headerGroup.headers.map(column => (\r\n               <th\r\n\t\t// sorting function\r\n                 {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                 >\r\n                 {column.render('Header')}\r\n\t\t <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' ðŸ”½'\r\n                        : ' ðŸ”¼'\r\n                      : ' (click to sort)'}\r\n                  </span>\r\n\t\t  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n               </th>\r\n             ))}\r\n           </tr>\r\n         ))}\r\n       </thead>\r\n       <tbody {...getTableBodyProps()}>\r\n         {page.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td\r\n                      // For educational purposes, let's color the\r\n                      // cell depending on what type it is given\r\n                      // from the useGroupBy hook\r\n                      {...cell.getCellProps()}\r\n                      style={{\r\n                        background: cell.isGrouped\r\n                          ? '#0aff0082'\r\n                          : cell.isAggregated\r\n                          ? '#ffa50078'\r\n                          : cell.isPlaceholder\r\n                          ? '#ff000042'\r\n                          : 'white',\r\n                      }}\r\n                    >\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell')} ({row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell')\r\n                      )}\r\n                    </td>\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n       </tbody>\r\n\t<tfoot>\r\n        {footerGroups.map(group => (\r\n          <tr {...group.getFooterGroupProps()}>\r\n            {group.headers.map(column => (\r\n              <td \r\n\t\t{...column.getFooterProps()}>\r\n\t\t{column.canGroupBy ? (\r\n                    // If the column can be grouped, let's add a toggle\r\n                    <span {...column.getGroupByToggleProps()}>\r\n                      {column.isGrouped ? 'Click to Ungroup ' : 'Click to Group'}\r\n                    </span>\r\n                  ) : null}\r\n\t\t\r\n\t\t{column.render('Footer')}\r\n\t      </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tfoot>\r\n     </table>\r\n\r\n\t\r\n     <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n</div>\r\n )\r\n  \r\n}\r\n \r\n\r\n// configure columns, populate cells, render table\r\n function AnalyticsTable() {\r\n   const data = React.useMemo(\r\n     () => [\r\n       {\r\n         col1: 'Cena, John',\r\n         col2: 'Attended Seminar',\r\n\t col3: 'Training/Seminars'\r\n       },\r\n       {\r\n         col1: 'Stark, Anthony',\r\n         col2: 'Published Journal',\r\n\t col3: 'Publications'\r\n       },\r\n       {\r\n         col1: 'Nelson, Kent',\r\n         col2: 'Published Book',\r\n\t col3: 'Publications'\r\n       },\r\n       {\r\n         col1: 'Parker, Peter',\r\n         col2: 'Conducted Training',\r\n\t col3: 'Training/Seminars'\r\n       },\r\n       {\r\n         col1: 'Omega, Kenny',\r\n         col2: 'Government Project',\r\n\t col3: 'Public Service'\r\n       },\r\n       {\r\n         col1: 'Wilson, Sam',\r\n         col2: 'Medical Research',\r\n\t col3: 'Research Grants'\r\n       },\r\n       {\r\n         col1: 'Naito, Tetsuya',\r\n         col2: 'Global Initiative',\r\n\t col3: 'Public Service'\r\n       },\r\n       {\r\n         col1: 'Sakurai, Masahiro',\r\n         col2: 'Charity Work',\r\n\t col3: 'Public Service'\r\n       },\r\n       {\r\n         col1: 'Reyes, Jaime',\r\n         col2: 'CERN Research',\r\n\t col3: 'Research Grants'\r\n       },\r\n       {\r\n         col1: 'Steve',\r\n         col2: 'Spoke at Seminar',\r\n\t col3: 'Training/Seminars'\r\n       },\r\n       {\r\n         col1: 'Hedgehog, Sonic the',\r\n         col2: 'Published Dissertation',\r\n\t col3: 'Publications'\r\n       },\r\n       {\r\n         col1: 'Odinsdottir, Angela',\r\n         col2: 'Published Thesis',\r\n\t col3: 'Publications'\r\n       }\r\n     ],\r\n     []\r\n   )\r\n \r\n   const columns = React.useMemo(\r\n     () => [\r\n       {\r\n         Header: 'Name',\r\n\t Footer: '',\r\n         accessor: 'col1', // accessor is the \"key\" in the data,\r\n\t aggregate: 'count',\r\n         Aggregated: ({ value }) => `${value} Names`,\r\n\t Filter: DefaultColumnFilter\r\n       },\r\n       {\r\n         Header: 'Accomplishment',\r\n\t Footer: '',\r\n         accessor: 'col2',\r\n\t aggregate: 'count',\r\n         Aggregated: ({ value }) => `${value} Accomplishments`,\r\n\t Filter: DefaultColumnFilter\r\n       },\r\n       {\r\n         Header: 'Accomplishment Type',\r\n\t Footer: '',\r\n         accessor: 'col3',\r\n\t aggregate: 'count',\r\n         Aggregated: ({ value }) => `${value} Entries`,\r\n\t Filter: SelectColumnFilter\r\n       }\r\n     ],\r\n     []\r\n   )\r\n \r\n   return (\r\n     <Table columns={columns} data={data} /> \r\n   )\r\n }\r\n\r\nexport default AnalyticsTable\r\n"]},"metadata":{},"sourceType":"module"}